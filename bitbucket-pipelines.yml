# This is a sample build configuration for Other.
# Check our guides at https://confluence.atlassian.com/x/5Q4SMw for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: atlassian/default-image:2

pipelines:
  branches:
    master:
      - step:
          name: Build Docker Image
          services:
            - docker
          script: # Modify the commands below to build your repository.
            # Set $REGISTRY_USERNAME and $REGISTRY_PASSWORD as environment variables in repository settings
            - export DOCKER_IMAGE=$IMAGE_NAME:$BITBUCKET_COMMIT

            # build the Docker image (this will use the Dockerfile in the root of the repo)
            - docker build -t $DOCKER_IMAGE -f Dockerfile .
            # authenticate with the Docker Hub registry
            - docker login --username $REGISTRY_USER --password $REGISTRY_PASSWORD $REGISTRY_HOST
            # push the new Docker image to the Docker registry
            - docker push $DOCKER_IMAGE
      # deployment
      - step:
          name: Deploy to Kubernetes
          deployment: Production
          image: ahiho/bitkube-pipeline
          script:
            - export IMAGE_TAG=$BITBUCKET_COMMIT
            # Make script execuable
            - chmod a+x ./scripts/make-kubenetes-spec.sh
            # Replace env variable to k8s spec
            - ./scripts/make-kubenetes-spec.sh
            # NOTE: $KUBE_CONFIG is secret stored as a base64 encoded string
            # Base64 decode our kubeconfig file into a .kube config file (this will be destroyed automatically after this step runs)
            - mkdir -p ~/.kube
            - echo $KUBE_CONFIG | base64 -d > ~/.kube/config
            # Create docker secret
            - kubectl --namespace=$NAMESPACE create secret docker-registry regcred --docker-server=$REGISTRY_HOST --docker-username=$REGISTRY_USER --docker-password=$REGISTRY_PASSWORD --docker-email=$REGISTRY_EMAIL --dry-run -o yaml > docker-secret.yaml
            - kubectl --namespace=$NAMESPACE apply -f docker-secret.yaml
            # Tell our Kubernetes deployment to use the new Docker image tag
            - kubectl --namespace=$NAMESPACE apply -f k8s-spec.yaml
            # Verify deployment successful
            - kubectl --namespace=$NAMESPACE rollout status deploy/$SERVICE_NAME --timeout=60s