// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vpn.proto

package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Country entity
type Country struct {
	// unique
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// code
	Code                 string   `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Country) Reset()         { *m = Country{} }
func (m *Country) String() string { return proto.CompactTextString(m) }
func (*Country) ProtoMessage()    {}
func (*Country) Descriptor() ([]byte, []int) {
	return fileDescriptor_vpn_7f7e1ae755a8a1a4, []int{0}
}
func (m *Country) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Country.Unmarshal(m, b)
}
func (m *Country) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Country.Marshal(b, m, deterministic)
}
func (dst *Country) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Country.Merge(dst, src)
}
func (m *Country) XXX_Size() int {
	return xxx_messageInfo_Country.Size(m)
}
func (m *Country) XXX_DiscardUnknown() {
	xxx_messageInfo_Country.DiscardUnknown(m)
}

var xxx_messageInfo_Country proto.InternalMessageInfo

func (m *Country) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Country) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Country) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// VPNServer entity
type VPNServer struct {
	// unique id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// hostname
	HostName string `protobuf:"bytes,2,opt,name=hostName,proto3" json:"hostName,omitempty"`
	// IP address
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// score
	Score int32 `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	// ping
	Ping int32 `protobuf:"varint,5,opt,name=ping,proto3" json:"ping,omitempty"`
	// speed
	Speed int64 `protobuf:"varint,6,opt,name=speed,proto3" json:"speed,omitempty"`
	// country
	Country *Country `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	// number of VPN sessions
	NumVPNSessions int32 `protobuf:"varint,8,opt,name=numVPNSessions,proto3" json:"numVPNSessions,omitempty"`
	// uptime
	Uptime int64 `protobuf:"varint,9,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// total of users
	TotalUsers int32 `protobuf:"varint,10,opt,name=totalUsers,proto3" json:"totalUsers,omitempty"`
	// total traffics
	TotalTraffic int64 `protobuf:"varint,11,opt,name=totalTraffic,proto3" json:"totalTraffic,omitempty"`
	// log type
	LogType string `protobuf:"bytes,12,opt,name=logType,proto3" json:"logType,omitempty"`
	// operator
	Operator string `protobuf:"bytes,13,opt,name=operator,proto3" json:"operator,omitempty"`
	// message
	Message string `protobuf:"bytes,14,opt,name=message,proto3" json:"message,omitempty"`
	// OpenVPN config
	OpenVPNConfig string `protobuf:"bytes,15,opt,name=openVPNConfig,proto3" json:"openVPNConfig,omitempty"`
	// created time
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// updated time
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,17,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VPNServer) Reset()         { *m = VPNServer{} }
func (m *VPNServer) String() string { return proto.CompactTextString(m) }
func (*VPNServer) ProtoMessage()    {}
func (*VPNServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_vpn_7f7e1ae755a8a1a4, []int{1}
}
func (m *VPNServer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VPNServer.Unmarshal(m, b)
}
func (m *VPNServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VPNServer.Marshal(b, m, deterministic)
}
func (dst *VPNServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPNServer.Merge(dst, src)
}
func (m *VPNServer) XXX_Size() int {
	return xxx_messageInfo_VPNServer.Size(m)
}
func (m *VPNServer) XXX_DiscardUnknown() {
	xxx_messageInfo_VPNServer.DiscardUnknown(m)
}

var xxx_messageInfo_VPNServer proto.InternalMessageInfo

func (m *VPNServer) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VPNServer) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *VPNServer) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *VPNServer) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *VPNServer) GetPing() int32 {
	if m != nil {
		return m.Ping
	}
	return 0
}

func (m *VPNServer) GetSpeed() int64 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *VPNServer) GetCountry() *Country {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *VPNServer) GetNumVPNSessions() int32 {
	if m != nil {
		return m.NumVPNSessions
	}
	return 0
}

func (m *VPNServer) GetUptime() int64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *VPNServer) GetTotalUsers() int32 {
	if m != nil {
		return m.TotalUsers
	}
	return 0
}

func (m *VPNServer) GetTotalTraffic() int64 {
	if m != nil {
		return m.TotalTraffic
	}
	return 0
}

func (m *VPNServer) GetLogType() string {
	if m != nil {
		return m.LogType
	}
	return ""
}

func (m *VPNServer) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *VPNServer) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *VPNServer) GetOpenVPNConfig() string {
	if m != nil {
		return m.OpenVPNConfig
	}
	return ""
}

func (m *VPNServer) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *VPNServer) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

// List country request
type ListCountriesRequest struct {
	// api version
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCountriesRequest) Reset()         { *m = ListCountriesRequest{} }
func (m *ListCountriesRequest) String() string { return proto.CompactTextString(m) }
func (*ListCountriesRequest) ProtoMessage()    {}
func (*ListCountriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_vpn_7f7e1ae755a8a1a4, []int{2}
}
func (m *ListCountriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCountriesRequest.Unmarshal(m, b)
}
func (m *ListCountriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCountriesRequest.Marshal(b, m, deterministic)
}
func (dst *ListCountriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCountriesRequest.Merge(dst, src)
}
func (m *ListCountriesRequest) XXX_Size() int {
	return xxx_messageInfo_ListCountriesRequest.Size(m)
}
func (m *ListCountriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCountriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCountriesRequest proto.InternalMessageInfo

func (m *ListCountriesRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

// List country response
type ListCountriesResponse struct {
	// api version
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// list countries
	Data                 []*Country `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListCountriesResponse) Reset()         { *m = ListCountriesResponse{} }
func (m *ListCountriesResponse) String() string { return proto.CompactTextString(m) }
func (*ListCountriesResponse) ProtoMessage()    {}
func (*ListCountriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_vpn_7f7e1ae755a8a1a4, []int{3}
}
func (m *ListCountriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCountriesResponse.Unmarshal(m, b)
}
func (m *ListCountriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCountriesResponse.Marshal(b, m, deterministic)
}
func (dst *ListCountriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCountriesResponse.Merge(dst, src)
}
func (m *ListCountriesResponse) XXX_Size() int {
	return xxx_messageInfo_ListCountriesResponse.Size(m)
}
func (m *ListCountriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCountriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCountriesResponse proto.InternalMessageInfo

func (m *ListCountriesResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *ListCountriesResponse) GetData() []*Country {
	if m != nil {
		return m.Data
	}
	return nil
}

// List VPN servers request
type ListVPNServerRequest struct {
	// api version
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// country code
	CountryCode          string   `protobuf:"bytes,2,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListVPNServerRequest) Reset()         { *m = ListVPNServerRequest{} }
func (m *ListVPNServerRequest) String() string { return proto.CompactTextString(m) }
func (*ListVPNServerRequest) ProtoMessage()    {}
func (*ListVPNServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_vpn_7f7e1ae755a8a1a4, []int{4}
}
func (m *ListVPNServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVPNServerRequest.Unmarshal(m, b)
}
func (m *ListVPNServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVPNServerRequest.Marshal(b, m, deterministic)
}
func (dst *ListVPNServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVPNServerRequest.Merge(dst, src)
}
func (m *ListVPNServerRequest) XXX_Size() int {
	return xxx_messageInfo_ListVPNServerRequest.Size(m)
}
func (m *ListVPNServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVPNServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListVPNServerRequest proto.InternalMessageInfo

func (m *ListVPNServerRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *ListVPNServerRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

// List VPN servers response {
type ListVPNServerResponse struct {
	// api version
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// list VPN servers
	Data                 []*VPNServer `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListVPNServerResponse) Reset()         { *m = ListVPNServerResponse{} }
func (m *ListVPNServerResponse) String() string { return proto.CompactTextString(m) }
func (*ListVPNServerResponse) ProtoMessage()    {}
func (*ListVPNServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_vpn_7f7e1ae755a8a1a4, []int{5}
}
func (m *ListVPNServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVPNServerResponse.Unmarshal(m, b)
}
func (m *ListVPNServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVPNServerResponse.Marshal(b, m, deterministic)
}
func (dst *ListVPNServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVPNServerResponse.Merge(dst, src)
}
func (m *ListVPNServerResponse) XXX_Size() int {
	return xxx_messageInfo_ListVPNServerResponse.Size(m)
}
func (m *ListVPNServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVPNServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListVPNServerResponse proto.InternalMessageInfo

func (m *ListVPNServerResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *ListVPNServerResponse) GetData() []*VPNServer {
	if m != nil {
		return m.Data
	}
	return nil
}

// VPNGateCrawler request
type VPNGateCrawlerRequest struct {
	// api version
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VPNGateCrawlerRequest) Reset()         { *m = VPNGateCrawlerRequest{} }
func (m *VPNGateCrawlerRequest) String() string { return proto.CompactTextString(m) }
func (*VPNGateCrawlerRequest) ProtoMessage()    {}
func (*VPNGateCrawlerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_vpn_7f7e1ae755a8a1a4, []int{6}
}
func (m *VPNGateCrawlerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VPNGateCrawlerRequest.Unmarshal(m, b)
}
func (m *VPNGateCrawlerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VPNGateCrawlerRequest.Marshal(b, m, deterministic)
}
func (dst *VPNGateCrawlerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPNGateCrawlerRequest.Merge(dst, src)
}
func (m *VPNGateCrawlerRequest) XXX_Size() int {
	return xxx_messageInfo_VPNGateCrawlerRequest.Size(m)
}
func (m *VPNGateCrawlerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VPNGateCrawlerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VPNGateCrawlerRequest proto.InternalMessageInfo

func (m *VPNGateCrawlerRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

// VPNGateCrawler response
type VPNGateCrawlerResponse struct {
	// api version
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// list vpn servers
	Data                 []*VPNServer `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *VPNGateCrawlerResponse) Reset()         { *m = VPNGateCrawlerResponse{} }
func (m *VPNGateCrawlerResponse) String() string { return proto.CompactTextString(m) }
func (*VPNGateCrawlerResponse) ProtoMessage()    {}
func (*VPNGateCrawlerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_vpn_7f7e1ae755a8a1a4, []int{7}
}
func (m *VPNGateCrawlerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VPNGateCrawlerResponse.Unmarshal(m, b)
}
func (m *VPNGateCrawlerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VPNGateCrawlerResponse.Marshal(b, m, deterministic)
}
func (dst *VPNGateCrawlerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPNGateCrawlerResponse.Merge(dst, src)
}
func (m *VPNGateCrawlerResponse) XXX_Size() int {
	return xxx_messageInfo_VPNGateCrawlerResponse.Size(m)
}
func (m *VPNGateCrawlerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VPNGateCrawlerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VPNGateCrawlerResponse proto.InternalMessageInfo

func (m *VPNGateCrawlerResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *VPNGateCrawlerResponse) GetData() []*VPNServer {
	if m != nil {
		return m.Data
	}
	return nil
}

// API Version request
type VersionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionRequest) Reset()         { *m = VersionRequest{} }
func (m *VersionRequest) String() string { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()    {}
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_vpn_7f7e1ae755a8a1a4, []int{8}
}
func (m *VersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionRequest.Unmarshal(m, b)
}
func (m *VersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionRequest.Marshal(b, m, deterministic)
}
func (dst *VersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionRequest.Merge(dst, src)
}
func (m *VersionRequest) XXX_Size() int {
	return xxx_messageInfo_VersionRequest.Size(m)
}
func (m *VersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VersionRequest proto.InternalMessageInfo

// API Version response
type VersionResponse struct {
	// API version
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Build time
	BuildTime string `protobuf:"bytes,2,opt,name=buildTime,proto3" json:"buildTime,omitempty"`
	// Commit hash
	Commit string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	// Release version
	Release              string   `protobuf:"bytes,4,opt,name=release,proto3" json:"release,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionResponse) Reset()         { *m = VersionResponse{} }
func (m *VersionResponse) String() string { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()    {}
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_vpn_7f7e1ae755a8a1a4, []int{9}
}
func (m *VersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionResponse.Unmarshal(m, b)
}
func (m *VersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionResponse.Marshal(b, m, deterministic)
}
func (dst *VersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionResponse.Merge(dst, src)
}
func (m *VersionResponse) XXX_Size() int {
	return xxx_messageInfo_VersionResponse.Size(m)
}
func (m *VersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionResponse proto.InternalMessageInfo

func (m *VersionResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *VersionResponse) GetBuildTime() string {
	if m != nil {
		return m.BuildTime
	}
	return ""
}

func (m *VersionResponse) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *VersionResponse) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

// API Heath request
type HealthzRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthzRequest) Reset()         { *m = HealthzRequest{} }
func (m *HealthzRequest) String() string { return proto.CompactTextString(m) }
func (*HealthzRequest) ProtoMessage()    {}
func (*HealthzRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_vpn_7f7e1ae755a8a1a4, []int{10}
}
func (m *HealthzRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthzRequest.Unmarshal(m, b)
}
func (m *HealthzRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthzRequest.Marshal(b, m, deterministic)
}
func (dst *HealthzRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthzRequest.Merge(dst, src)
}
func (m *HealthzRequest) XXX_Size() int {
	return xxx_messageInfo_HealthzRequest.Size(m)
}
func (m *HealthzRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthzRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthzRequest proto.InternalMessageInfo

// API Heath response
type HealthzResponse struct {
	// API version
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthzResponse) Reset()         { *m = HealthzResponse{} }
func (m *HealthzResponse) String() string { return proto.CompactTextString(m) }
func (*HealthzResponse) ProtoMessage()    {}
func (*HealthzResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_vpn_7f7e1ae755a8a1a4, []int{11}
}
func (m *HealthzResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthzResponse.Unmarshal(m, b)
}
func (m *HealthzResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthzResponse.Marshal(b, m, deterministic)
}
func (dst *HealthzResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthzResponse.Merge(dst, src)
}
func (m *HealthzResponse) XXX_Size() int {
	return xxx_messageInfo_HealthzResponse.Size(m)
}
func (m *HealthzResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthzResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthzResponse proto.InternalMessageInfo

func (m *HealthzResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func init() {
	proto.RegisterType((*Country)(nil), "v1.Country")
	proto.RegisterType((*VPNServer)(nil), "v1.VPNServer")
	proto.RegisterType((*ListCountriesRequest)(nil), "v1.ListCountriesRequest")
	proto.RegisterType((*ListCountriesResponse)(nil), "v1.ListCountriesResponse")
	proto.RegisterType((*ListVPNServerRequest)(nil), "v1.ListVPNServerRequest")
	proto.RegisterType((*ListVPNServerResponse)(nil), "v1.ListVPNServerResponse")
	proto.RegisterType((*VPNGateCrawlerRequest)(nil), "v1.VPNGateCrawlerRequest")
	proto.RegisterType((*VPNGateCrawlerResponse)(nil), "v1.VPNGateCrawlerResponse")
	proto.RegisterType((*VersionRequest)(nil), "v1.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "v1.VersionResponse")
	proto.RegisterType((*HealthzRequest)(nil), "v1.HealthzRequest")
	proto.RegisterType((*HealthzResponse)(nil), "v1.HealthzResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	// crawl all vpn server
	VPNGateCrawler(ctx context.Context, in *VPNGateCrawlerRequest, opts ...grpc.CallOption) (*VPNGateCrawlerResponse, error)
	// API Version
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// Service heath
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	// List all country that have available VPN servers
	ListCountries(ctx context.Context, in *ListCountriesRequest, opts ...grpc.CallOption) (*ListCountriesResponse, error)
	// List all VPN servers
	ListVPNServers(ctx context.Context, in *ListVPNServerRequest, opts ...grpc.CallOption) (*ListVPNServerResponse, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) VPNGateCrawler(ctx context.Context, in *VPNGateCrawlerRequest, opts ...grpc.CallOption) (*VPNGateCrawlerResponse, error) {
	out := new(VPNGateCrawlerResponse)
	err := c.cc.Invoke(ctx, "/v1.Service/VPNGateCrawler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/v1.Service/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, "/v1.Service/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListCountries(ctx context.Context, in *ListCountriesRequest, opts ...grpc.CallOption) (*ListCountriesResponse, error) {
	out := new(ListCountriesResponse)
	err := c.cc.Invoke(ctx, "/v1.Service/ListCountries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListVPNServers(ctx context.Context, in *ListVPNServerRequest, opts ...grpc.CallOption) (*ListVPNServerResponse, error) {
	out := new(ListVPNServerResponse)
	err := c.cc.Invoke(ctx, "/v1.Service/ListVPNServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	// crawl all vpn server
	VPNGateCrawler(context.Context, *VPNGateCrawlerRequest) (*VPNGateCrawlerResponse, error)
	// API Version
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// Service heath
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	// List all country that have available VPN servers
	ListCountries(context.Context, *ListCountriesRequest) (*ListCountriesResponse, error)
	// List all VPN servers
	ListVPNServers(context.Context, *ListVPNServerRequest) (*ListVPNServerResponse, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_VPNGateCrawler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPNGateCrawlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).VPNGateCrawler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/VPNGateCrawler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).VPNGateCrawler(ctx, req.(*VPNGateCrawlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCountriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/ListCountries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListCountries(ctx, req.(*ListCountriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListVPNServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVPNServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListVPNServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/ListVPNServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListVPNServers(ctx, req.(*ListVPNServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VPNGateCrawler",
			Handler:    _Service_VPNGateCrawler_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Service_Version_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _Service_Healthz_Handler,
		},
		{
			MethodName: "ListCountries",
			Handler:    _Service_ListCountries_Handler,
		},
		{
			MethodName: "ListVPNServers",
			Handler:    _Service_ListVPNServers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vpn.proto",
}

func init() { proto.RegisterFile("vpn.proto", fileDescriptor_vpn_7f7e1ae755a8a1a4) }

var fileDescriptor_vpn_7f7e1ae755a8a1a4 = []byte{
	// 734 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xc9, 0x6e, 0xdb, 0x3a,
	0x14, 0x85, 0x87, 0xc4, 0xd1, 0x75, 0x3c, 0x3c, 0x66, 0x00, 0x23, 0x04, 0x2f, 0x7e, 0x7a, 0x03,
	0xfc, 0x80, 0x17, 0x1b, 0xc9, 0xdb, 0x74, 0x1b, 0x38, 0x40, 0x8a, 0x20, 0x35, 0x02, 0x35, 0xf5,
	0xa2, 0x5d, 0x31, 0x12, 0xad, 0x10, 0xb0, 0x45, 0x56, 0xa4, 0x1d, 0xa4, 0xcb, 0xfe, 0x42, 0x17,
	0xdd, 0xf4, 0xaf, 0xfa, 0x0b, 0xfd, 0x90, 0x82, 0x83, 0x07, 0xd9, 0x71, 0xbb, 0xe8, 0xca, 0xbc,
	0x87, 0xf7, 0x9c, 0x3b, 0xe8, 0xd0, 0xe0, 0x4d, 0x45, 0xda, 0x11, 0x19, 0x57, 0x1c, 0x15, 0xa7,
	0x67, 0xfe, 0x49, 0xc2, 0x79, 0x32, 0xa2, 0x5d, 0x83, 0xdc, 0x4f, 0x86, 0x5d, 0xc5, 0xc6, 0x54,
	0x2a, 0x32, 0x16, 0x36, 0xc9, 0x3f, 0x76, 0x09, 0x44, 0xb0, 0x2e, 0x49, 0x53, 0xae, 0x88, 0x62,
	0x3c, 0x95, 0xee, 0xf6, 0x3f, 0xf3, 0x13, 0x9d, 0x26, 0x34, 0x3d, 0x95, 0x8f, 0x24, 0x49, 0x68,
	0xd6, 0xe5, 0xc2, 0x64, 0xac, 0x67, 0x07, 0x17, 0x50, 0xe9, 0xf1, 0x49, 0xaa, 0xb2, 0x27, 0x54,
	0x87, 0x22, 0x8b, 0x71, 0xa1, 0x55, 0x68, 0x6f, 0x85, 0x45, 0x16, 0x23, 0x04, 0xe5, 0x94, 0x8c,
	0x29, 0x2e, 0xb6, 0x0a, 0x6d, 0x2f, 0x34, 0x67, 0x8d, 0x45, 0x3c, 0xa6, 0xb8, 0x64, 0x31, 0x7d,
	0x0e, 0xbe, 0x94, 0xc1, 0x1b, 0xdc, 0xf6, 0x5f, 0xd3, 0x6c, 0x4a, 0xb3, 0x35, 0x15, 0x1f, 0x76,
	0x1e, 0xb8, 0x54, 0xfd, 0x85, 0xd2, 0x3c, 0x36, 0xb9, 0xc2, 0x69, 0x15, 0x99, 0x40, 0xfb, 0xb0,
	0x25, 0x23, 0x9e, 0x51, 0x5c, 0x36, 0x74, 0x1b, 0xe8, 0x9a, 0x82, 0xa5, 0x09, 0xde, 0x32, 0xa0,
	0x39, 0x9b, 0x4c, 0x41, 0x69, 0x8c, 0xb7, 0x5b, 0x85, 0x76, 0x29, 0xb4, 0x01, 0xfa, 0x1b, 0x2a,
	0x91, 0x1d, 0x06, 0x57, 0x5a, 0x85, 0x76, 0xf5, 0xbc, 0xda, 0x99, 0x9e, 0x75, 0xdc, 0x7c, 0xe1,
	0xec, 0x0e, 0xfd, 0x03, 0xf5, 0x74, 0x32, 0x36, 0x2d, 0x4b, 0xa9, 0x77, 0x81, 0x77, 0x8c, 0xf4,
	0x0a, 0x8a, 0x0e, 0x61, 0x7b, 0x22, 0xf4, 0xf2, 0xb1, 0x67, 0xaa, 0xb8, 0x08, 0xfd, 0x0e, 0xa0,
	0xb8, 0x22, 0xa3, 0x37, 0x92, 0x66, 0x12, 0x83, 0xe1, 0x2e, 0x21, 0x28, 0x80, 0x5d, 0x13, 0xdd,
	0x65, 0x64, 0x38, 0x64, 0x11, 0xae, 0x1a, 0x76, 0x0e, 0x43, 0x18, 0x2a, 0x23, 0x9e, 0xdc, 0x3d,
	0x09, 0x8a, 0x77, 0xcd, 0xfc, 0xb3, 0x50, 0x2f, 0x8c, 0x0b, 0x9a, 0x11, 0xc5, 0x33, 0x5c, 0xb3,
	0x0b, 0x9b, 0xc5, 0x9a, 0x35, 0xa6, 0x52, 0x92, 0x84, 0xe2, 0xba, 0x65, 0xb9, 0x10, 0xfd, 0x05,
	0x35, 0x2e, 0x68, 0x3a, 0xb8, 0xed, 0xf7, 0x78, 0x3a, 0x64, 0x09, 0x6e, 0x98, 0xfb, 0x3c, 0x88,
	0x5e, 0x80, 0x17, 0x65, 0x94, 0x28, 0x1a, 0x5f, 0x28, 0xdc, 0x34, 0x2b, 0xf2, 0x3b, 0xd6, 0x4d,
	0x9d, 0x99, 0xdd, 0x3a, 0x77, 0x33, 0xbb, 0x85, 0x8b, 0x64, 0xcd, 0x9c, 0x88, 0xd8, 0x31, 0x7f,
	0xfb, 0x39, 0x73, 0x9e, 0x1c, 0xb4, 0x61, 0xff, 0x86, 0x49, 0x65, 0xbf, 0x02, 0xa3, 0x32, 0xa4,
	0xef, 0x27, 0x54, 0x2a, 0xd4, 0x84, 0x12, 0x11, 0xcc, 0x38, 0xc5, 0x0b, 0xf5, 0x31, 0xb8, 0x86,
	0x83, 0x95, 0x4c, 0x29, 0x78, 0x2a, 0xe9, 0x7a, 0x2a, 0x3a, 0x81, 0x72, 0x4c, 0x14, 0xc1, 0xc5,
	0x56, 0x69, 0xf5, 0x33, 0x9b, 0x8b, 0xe0, 0xda, 0x56, 0x9d, 0xfb, 0x72, 0x63, 0x55, 0xd4, 0x82,
	0xaa, 0x33, 0x46, 0x4f, 0x3b, 0xdb, 0x7a, 0x74, 0x19, 0x0a, 0x6e, 0x6c, 0x5f, 0x4b, 0x5a, 0x1b,
	0xfb, 0xfa, 0x23, 0xd7, 0x57, 0x4d, 0xf7, 0xb5, 0xa0, 0xd9, 0xce, 0xfe, 0x85, 0x83, 0xc1, 0x6d,
	0xff, 0x8a, 0x28, 0xda, 0xcb, 0xc8, 0xe3, 0xe8, 0x07, 0xad, 0x05, 0xaf, 0xe0, 0x70, 0x35, 0xf5,
	0x57, 0x2a, 0x37, 0xa1, 0x3e, 0xa0, 0x99, 0xf6, 0xb6, 0x2b, 0x19, 0x48, 0x68, 0xcc, 0x91, 0x8d,
	0xca, 0xc7, 0xe0, 0xdd, 0x4f, 0xd8, 0x28, 0xd6, 0x5f, 0xd7, 0xad, 0x67, 0x01, 0xe8, 0x47, 0x12,
	0xf1, 0xf1, 0x98, 0x29, 0xf7, 0x8e, 0x5d, 0xa4, 0xad, 0x9a, 0xd1, 0x11, 0x25, 0xd2, 0xbe, 0x66,
	0x2f, 0x9c, 0x85, 0xba, 0x8d, 0x97, 0x94, 0x8c, 0xd4, 0xc3, 0x87, 0x59, 0x1b, 0x7f, 0x42, 0x63,
	0x8e, 0x6c, 0x6a, 0xe3, 0xfc, 0x73, 0x09, 0x2a, 0x7a, 0x1c, 0x16, 0x51, 0x74, 0x05, 0xf5, 0xfc,
	0x62, 0xd0, 0x91, 0x1b, 0x78, 0x7d, 0xaf, 0xbe, 0xff, 0xdc, 0x95, 0x2b, 0x73, 0x09, 0x15, 0xb7,
	0x00, 0x84, 0x4c, 0x5a, 0x6e, 0x3f, 0xfe, 0x5e, 0x0e, 0xb3, 0x9c, 0xa0, 0xf9, 0xf1, 0xeb, 0xb7,
	0x4f, 0x45, 0x40, 0x3b, 0xdd, 0xa9, 0xa3, 0x5e, 0x42, 0xc5, 0xf5, 0x6f, 0x55, 0xf2, 0xe3, 0x59,
	0x95, 0x95, 0x01, 0x97, 0x54, 0x1e, 0x1c, 0xf5, 0x1d, 0xd4, 0x72, 0xf6, 0x47, 0x58, 0xf3, 0x9e,
	0x7b, 0x3b, 0xfe, 0xd1, 0x33, 0x37, 0x4e, 0xf7, 0xc0, 0xe8, 0x36, 0x50, 0xad, 0x3b, 0x3d, 0xeb,
	0x46, 0x73, 0xad, 0xb7, 0x50, 0xcf, 0x79, 0x78, 0x49, 0x7d, 0xf5, 0x8d, 0x2c, 0xd4, 0xd7, 0x1c,
	0x1f, 0xec, 0x19, 0xf5, 0x1a, 0xaa, 0x6a, 0x75, 0x69, 0x95, 0xee, 0xb7, 0xcd, 0x1f, 0xc0, 0xff,
	0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xea, 0xd6, 0x69, 0xba, 0xc8, 0x06, 0x00, 0x00,
}
